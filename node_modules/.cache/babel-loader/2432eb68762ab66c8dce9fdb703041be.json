{"ast":null,"code":"var _jsxFileName = \"/Users/michaelhatch/Code/cornered/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // create the board\n  const boardArr = Array(8).fill(1).map(() => Array(8).fill(1).map(() => ({\n    checkers: 0,\n    owner: \"\"\n  })));\n  boardArr[2][2].checkers = 3;\n  boardArr[2][2].owner = \"left\";\n  boardArr[5][5].checkers = 3;\n  boardArr[5][5].owner = \"right\"; // set up our template variables\n\n  const [board, setBoard] = useState(boardArr);\n  const [leftCheckers, setLeftCheckers] = useState(30);\n  const [rightCheckers, setRightCheckers] = useState(30);\n  const [whoseTurn, setWhoseTurn] = useState(\"left\");\n  const [movesThisTurn, setMovesThisTurn] = useState(Array(8).fill(1).map(() => Array(8).fill(0))); // handle moving and attacking\n\n  const move = (row, column, rowDelta, columnDelta) => {\n    const target = board[row + rowDelta][column + columnDelta];\n\n    if (target.checkers < 3 && (!target.owner || target.owner === whoseTurn) && board[row][column].checkers - movesThisTurn[row][column] > 0 && !(board[row][column].checkers === 1 && (whoseTurn === \"left\" && row === 2 && column === 2 || whoseTurn === \"right\" && row === 5 && column === 5))) {\n      // just movin' pieces\n      setMovesThisTurn(state => state.map((columns, ri) => columns.map((moves, ci) => {\n        if (ri === row + rowDelta && ci === column + columnDelta) {\n          return moves + 1;\n        }\n\n        return moves;\n      })));\n      setBoard(state => state.map((columns, ri) => columns.map((square, ci) => {\n        if (ri === row + rowDelta && ci === column + columnDelta) {\n          return {\n            checkers: square.checkers + 1,\n            owner: whoseTurn\n          };\n        } else if (ri === row && ci === column) {\n          return {\n            checkers: square.checkers - 1,\n            owner: square.checkers === 1 ? \"\" : whoseTurn\n          };\n        }\n\n        return { ...square\n        };\n      })));\n    } else if (!!target.owner && target.owner !== whoseTurn) {\n      // we're attacking!\n      if (!Math.floor(Math.random() * 2)) {\n        // target loses one\n        if (whoseTurn === \"left\") {\n          setRightCheckers(rightCheckers + 1);\n        } else {\n          setLeftCheckers(leftCheckers + 1);\n        }\n\n        setBoard(state => state.map((columns, ri) => columns.map((square, ci) => {\n          if (ri === row + rowDelta && ci === column + columnDelta) {\n            return {\n              checkers: square.checkers - 1,\n              owner: square.checkers === 1 ? \"\" : square.owner\n            };\n          }\n\n          return { ...square\n          };\n        })));\n      } else {\n        // origin loses one\n        if (whoseTurn === \"left\") {\n          setLeftCheckers(leftCheckers + 1);\n        } else {\n          setRightCheckers(rightCheckers + 1);\n        }\n\n        setBoard(state => state.map((columns, ri) => columns.map((square, ci) => {\n          if (ri === row && ci === column) {\n            return {\n              checkers: square.checkers - 1,\n              owner: square.checkers === 1 ? \"\" : whoseTurn\n            };\n          }\n\n          return { ...square\n          };\n        })));\n      }\n    }\n  }; // handle switching players\n\n\n  const contiguousLoop = (ri, ci, resolve, checked, whoseComingUp) => {\n    checked.push(`${ri}${ci}`);\n\n    if (whoseComingUp === \"left\" && ri === 2 && ci === 2 || whoseComingUp === \"right\" && ri === 5 && ci === 5) {\n      resolve(true);\n      return;\n    }\n\n    if (!checked.includes(`${ri - 1}${ci}`) && ri !== 0 && board[ri - 1][ci].owner === whoseComingUp) {\n      contiguousLoop(ri - 1, ci, resolve, checked, whoseComingUp);\n    }\n\n    if (!checked.includes(`${ri}${ci + 1}`) && ci !== 7 && board[ri][ci + 1].owner === whoseComingUp) {\n      contiguousLoop(ri, ci + 1, resolve, checked, whoseComingUp);\n    }\n\n    if (!checked.includes(`${ri + 1}${ci}`) && ri !== 7 && board[ri + 1][ci].owner === whoseComingUp) {\n      contiguousLoop(ri + 1, ci, resolve, checked, whoseComingUp);\n    }\n\n    if (!checked.includes(`${ri}${ci - 1}`) && ci !== 0 && board[ri][ci - 1].owner === whoseComingUp) {\n      contiguousLoop(ri, ci - 1, resolve, checked, whoseComingUp);\n    }\n  };\n\n  const isContiguous = (ri, ci) => {\n    const whoseComingUp = whoseTurn === \"right\" ? \"left\" : \"right\";\n    return new Promise(resolve => {\n      contiguousLoop(ri, ci, resolve, [], whoseComingUp);\n      resolve(false);\n    });\n  };\n\n  const switchPlayerTo = which => {\n    let qualifyingSquares = [];\n    board.forEach((columns, ri) => {\n      columns.forEach((square, ci) => {\n        if (!!square.owner && square.owner !== whoseTurn && square.checkers < 3) {\n          qualifyingSquares.push([ri, ci]);\n        }\n      });\n    });\n    Promise.all(qualifyingSquares.map(s => isContiguous(s[0], s[1]))).then(results => {\n      qualifyingSquares = qualifyingSquares.filter((_, i) => results[i]);\n\n      if (whoseTurn === \"right\" && qualifyingSquares.length <= leftCheckers || whoseTurn === \"left\" && qualifyingSquares.length <= rightCheckers) {\n        if (whoseTurn === \"right\") {\n          setLeftCheckers(leftCheckers - qualifyingSquares.length);\n        } else {\n          setRightCheckers(rightCheckers - qualifyingSquares.length);\n        }\n\n        setBoard(state => state.map((columns, ri) => columns.map((square, ci) => {\n          if (qualifyingSquares.some(rc => rc[0] === ri && rc[1] === ci)) {\n            return {\n              checkers: square.checkers + 1,\n              owner: square.owner\n            };\n          }\n\n          return { ...square\n          };\n        })));\n      }\n\n      setMovesThisTurn(Array(8).fill(1).map(() => Array(8).fill(0)));\n      setWhoseTurn(which);\n    });\n  }; // the template\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"board\",\n      children: board.map((columns, row) => columns.map((square, column) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${square.owner}${square.owner === whoseTurn ? \" hoverable\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square\",\n          children: square.checkers ? square.checkers : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 15\n        }, this), row ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"up\",\n          onClick: () => move(row, column, -1, 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }, this) : null, column < 7 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          onClick: () => move(row, column, 0, 1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 17\n        }, this) : null, row < 7 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"down\",\n          onClick: () => move(row, column, 1, 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 17\n        }, this) : null, column ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          onClick: () => move(row, column, 0, -1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 17\n        }, this) : null]\n      }, `${row}.${column}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkers-left left\",\n        children: [\"Blue: \", leftCheckers]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `switch ${whoseTurn === \"left\" ? \"blue\" : \"orange\"}`,\n        onClick: () => switchPlayerTo(whoseTurn === \"left\" ? \"right\" : \"left\"),\n        children: [whoseTurn === \"left\" ? \"Blue\" : \"Orange\", \"'s turn\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkers-left right\",\n        children: [\"Orange: \", rightCheckers]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Evb+ZNXuF4lIkhsZY+SenLaz84o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/michaelhatch/Code/cornered/src/App.js"],"names":["useState","App","boardArr","Array","fill","map","checkers","owner","board","setBoard","leftCheckers","setLeftCheckers","rightCheckers","setRightCheckers","whoseTurn","setWhoseTurn","movesThisTurn","setMovesThisTurn","move","row","column","rowDelta","columnDelta","target","state","columns","ri","moves","ci","square","Math","floor","random","contiguousLoop","resolve","checked","whoseComingUp","push","includes","isContiguous","Promise","switchPlayerTo","which","qualifyingSquares","forEach","all","s","then","results","filter","_","i","length","some","rc"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nfunction App() {\n  // create the board\n  const boardArr = Array(8)\n    .fill(1)\n    .map(() =>\n      Array(8)\n        .fill(1)\n        .map(() => ({\n          checkers: 0,\n          owner: \"\",\n        }))\n    );\n  boardArr[2][2].checkers = 3;\n  boardArr[2][2].owner = \"left\";\n  boardArr[5][5].checkers = 3;\n  boardArr[5][5].owner = \"right\";\n\n  // set up our template variables\n  const [board, setBoard] = useState(boardArr);\n  const [leftCheckers, setLeftCheckers] = useState(30);\n  const [rightCheckers, setRightCheckers] = useState(30);\n  const [whoseTurn, setWhoseTurn] = useState(\"left\");\n  const [movesThisTurn, setMovesThisTurn] = useState(\n    Array(8)\n      .fill(1)\n      .map(() => Array(8).fill(0))\n  );\n\n  // handle moving and attacking\n  const move = (row, column, rowDelta, columnDelta) => {\n    const target = board[row + rowDelta][column + columnDelta];\n    if (\n      target.checkers < 3 &&\n      (!target.owner || target.owner === whoseTurn) &&\n      board[row][column].checkers - movesThisTurn[row][column] > 0 &&\n      !(\n        board[row][column].checkers === 1 &&\n        ((whoseTurn === \"left\" && row === 2 && column === 2) ||\n          (whoseTurn === \"right\" && row === 5 && column === 5))\n      )\n    ) {\n      // just movin' pieces\n      setMovesThisTurn((state) =>\n        state.map((columns, ri) =>\n          columns.map((moves, ci) => {\n            if (ri === row + rowDelta && ci === column + columnDelta) {\n              return moves + 1;\n            }\n            return moves;\n          })\n        )\n      );\n      setBoard((state) =>\n        state.map((columns, ri) =>\n          columns.map((square, ci) => {\n            if (ri === row + rowDelta && ci === column + columnDelta) {\n              return {\n                checkers: square.checkers + 1,\n                owner: whoseTurn,\n              };\n            } else if (ri === row && ci === column) {\n              return {\n                checkers: square.checkers - 1,\n                owner: square.checkers === 1 ? \"\" : whoseTurn,\n              };\n            }\n            return { ...square };\n          })\n        )\n      );\n    } else if (!!target.owner && target.owner !== whoseTurn) {\n      // we're attacking!\n      if (!Math.floor(Math.random() * 2)) {\n        // target loses one\n        if (whoseTurn === \"left\") {\n          setRightCheckers(rightCheckers + 1);\n        } else {\n          setLeftCheckers(leftCheckers + 1);\n        }\n        setBoard((state) =>\n          state.map((columns, ri) =>\n            columns.map((square, ci) => {\n              if (ri === row + rowDelta && ci === column + columnDelta) {\n                return {\n                  checkers: square.checkers - 1,\n                  owner: square.checkers === 1 ? \"\" : square.owner,\n                };\n              }\n              return { ...square };\n            })\n          )\n        );\n      } else {\n        // origin loses one\n        if (whoseTurn === \"left\") {\n          setLeftCheckers(leftCheckers + 1);\n        } else {\n          setRightCheckers(rightCheckers + 1);\n        }\n        setBoard((state) =>\n          state.map((columns, ri) =>\n            columns.map((square, ci) => {\n              if (ri === row && ci === column) {\n                return {\n                  checkers: square.checkers - 1,\n                  owner: square.checkers === 1 ? \"\" : whoseTurn,\n                };\n              }\n              return { ...square };\n            })\n          )\n        );\n      }\n    }\n  };\n\n  // handle switching players\n  const contiguousLoop = (ri, ci, resolve, checked, whoseComingUp) => {\n    checked.push(`${ri}${ci}`);\n    if (\n      (whoseComingUp === \"left\" && ri === 2 && ci === 2) ||\n      (whoseComingUp === \"right\" && ri === 5 && ci === 5)\n    ) {\n      resolve(true);\n      return;\n    }\n    if (\n      !checked.includes(`${ri - 1}${ci}`) &&\n      ri !== 0 &&\n      board[ri - 1][ci].owner === whoseComingUp\n    ) {\n      contiguousLoop(ri - 1, ci, resolve, checked, whoseComingUp);\n    }\n    if (\n      !checked.includes(`${ri}${ci + 1}`) &&\n      ci !== 7 &&\n      board[ri][ci + 1].owner === whoseComingUp\n    ) {\n      contiguousLoop(ri, ci + 1, resolve, checked, whoseComingUp);\n    }\n    if (\n      !checked.includes(`${ri + 1}${ci}`) &&\n      ri !== 7 &&\n      board[ri + 1][ci].owner === whoseComingUp\n    ) {\n      contiguousLoop(ri + 1, ci, resolve, checked, whoseComingUp);\n    }\n    if (\n      !checked.includes(`${ri}${ci - 1}`) &&\n      ci !== 0 &&\n      board[ri][ci - 1].owner === whoseComingUp\n    ) {\n      contiguousLoop(ri, ci - 1, resolve, checked, whoseComingUp);\n    }\n  };\n  const isContiguous = (ri, ci) => {\n    const whoseComingUp = whoseTurn === \"right\" ? \"left\" : \"right\";\n    return new Promise((resolve) => {\n      contiguousLoop(ri, ci, resolve, [], whoseComingUp);\n      resolve(false);\n    });\n  };\n  const switchPlayerTo = (which) => {\n    let qualifyingSquares = [];\n    board.forEach((columns, ri) => {\n      columns.forEach((square, ci) => {\n        if (\n          !!square.owner &&\n          square.owner !== whoseTurn &&\n          square.checkers < 3\n        ) {\n          qualifyingSquares.push([ri, ci]);\n        }\n      });\n    });\n    Promise.all(qualifyingSquares.map((s) => isContiguous(s[0], s[1]))).then(\n      (results) => {\n        qualifyingSquares = qualifyingSquares.filter((_, i) => results[i]);\n        if (\n          (whoseTurn === \"right\" && qualifyingSquares.length <= leftCheckers) ||\n          (whoseTurn === \"left\" && qualifyingSquares.length <= rightCheckers)\n        ) {\n          if (whoseTurn === \"right\") {\n            setLeftCheckers(leftCheckers - qualifyingSquares.length);\n          } else {\n            setRightCheckers(rightCheckers - qualifyingSquares.length);\n          }\n          setBoard((state) =>\n            state.map((columns, ri) =>\n              columns.map((square, ci) => {\n                if (\n                  qualifyingSquares.some((rc) => rc[0] === ri && rc[1] === ci)\n                ) {\n                  return {\n                    checkers: square.checkers + 1,\n                    owner: square.owner,\n                  };\n                }\n                return { ...square };\n              })\n            )\n          );\n        }\n        setMovesThisTurn(\n          Array(8)\n            .fill(1)\n            .map(() => Array(8).fill(0))\n        );\n        setWhoseTurn(which);\n      }\n    );\n  };\n\n  // the template\n  return (\n    <div className=\"container\">\n      <main className=\"board\">\n        {board.map((columns, row) =>\n          columns.map((square, column) => (\n            <div\n              className={`${square.owner}${\n                square.owner === whoseTurn ? \" hoverable\" : \"\"\n              }`}\n              key={`${row}.${column}`}\n            >\n              <div className=\"square\">\n                {square.checkers ? square.checkers : \"\"}\n              </div>\n              {row ? (\n                <div\n                  className=\"up\"\n                  onClick={() => move(row, column, -1, 0)}\n                ></div>\n              ) : null}\n              {column < 7 ? (\n                <div\n                  className=\"right\"\n                  onClick={() => move(row, column, 0, 1)}\n                ></div>\n              ) : null}\n              {row < 7 ? (\n                <div\n                  className=\"down\"\n                  onClick={() => move(row, column, 1, 0)}\n                ></div>\n              ) : null}\n              {column ? (\n                <div\n                  className=\"left\"\n                  onClick={() => move(row, column, 0, -1)}\n                ></div>\n              ) : null}\n            </div>\n          ))\n        )}\n      </main>\n      <footer className=\"footer\">\n        <div className=\"checkers-left left\">Blue: {leftCheckers}</div>\n        <div\n          className={`switch ${whoseTurn === \"left\" ? \"blue\" : \"orange\"}`}\n          onClick={() =>\n            switchPlayerTo(whoseTurn === \"left\" ? \"right\" : \"left\")\n          }\n        >\n          {whoseTurn === \"left\" ? \"Blue\" : \"Orange\"}&apos;s turn\n        </div>\n        <div className=\"checkers-left right\">Orange: {rightCheckers}</div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}